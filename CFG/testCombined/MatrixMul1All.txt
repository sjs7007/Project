/* http://www.programmingsimplified.com/c-program-multiply-matrices */

#include <stdio.h>
 
int main()
{
  int m, n, p, q, c, d, k, sum = 0;
  int first[10][10], second[10][10], multiply[10][10];
 
  printf("Enter the number of rows and columns of first matrix\n");
  scanf("%d%d", &m, &n);
  printf("Enter the elements of first matrix\n");
 
  /*for (  c = 0 ; c < m ; c++ )
    for ( d = 0 ; d < n ; d++ )
      scanf("%d", &first[c][d]);
 */
  printf("Enter the number of rows and columns of second matrix\n");
  scanf("%d%d", &p, &q);
 
  /*if ( n != p )
    printf("Matrices with entered orders can't be multiplied with each other.\n");
  else
  {*/
    printf("Enter the elements of second matrix\n");
 
    /*for ( c = 0 ; c < p ; c++ )
      for ( d = 0 ; d < q ; d++ )
        scanf("%d", &second[c][d]);
 */
    for ( c = 0 ; c < m ; c++ )
    {
      for ( d = 0 ; d < q ; d++ )
      {
        for ( k = 0 ; k < p ; k++ )
        {
          sum = sum + first[c][k]*second[k][d];
        }
 
        multiply[c][d] = sum;
        sum = 0;
      }
    }
 
   /* printf("Product of entered matrices:-\n");
 
    for ( c = 0 ; c < m ; c++ )
    {
      for ( d = 0 ; d < q ; d++ )
        printf("%d\t", multiply[c][d]);
 
      printf("\n");
    }
  }*/
 
  return 0;
}

--------------------------------------------------

;; Function main (main)

Merging blocks 11 and 12
main ()
{
  int multiply[10][10];
  int second[10][10];
  int first[10][10];
  int sum;
  int k;
  int d;
  int c;
  int q;
  int p;
  int n;
  int m;
  int D.1735;
  int m.8;
  int q.7;
  int d.6;
  int c.5;
  int p.4;
  int D.1729;
  int D.1728;
  int d.3;
  int k.2;
  int D.1725;
  int k.1;
  int c.0;
  const char * restrict D.1722;
  const char * restrict D.1721;

<bb 2>:
  sum = 0;
  __builtin_puts (&"Enter the number of rows and columns of first matrix"[0]);
  D.1721 = (const char * restrict) "%d%d";
  scanf (D.1721, &m, &n);
  __builtin_puts (&"Enter the elements of first matrix"[0]);
  __builtin_puts (&"Enter the number of rows and columns of second matrix"[0]);
  D.1722 = (const char * restrict) "%d%d";
  scanf (D.1722, &p, &q);
  __builtin_puts (&"Enter the elements of second matrix"[0]);
  c = 0;
  goto <bb 10>;

<bb 3>:
  d = 0;
  goto <bb 8>;

<bb 4>:
  k = 0;
  goto <bb 6>;

<bb 5>:
  c.0 = c;
  k.1 = k;
  D.1725 = first[c.0][k.1];
  k.2 = k;
  d.3 = d;
  D.1728 = second[k.2][d.3];
  D.1729 = D.1725 * D.1728;
  sum = D.1729 + sum;
  k = k + 1;

<bb 6>:
  p.4 = p;
  if (k < p.4)
    goto <bb 5>;
  else
    goto <bb 7>;

<bb 7>:
  c.5 = c;
  d.6 = d;
  multiply[c.5][d.6] = sum;
  sum = 0;
  d = d + 1;

<bb 8>:
  q.7 = q;
  if (d < q.7)
    goto <bb 4>;
  else
    goto <bb 9>;

<bb 9>:
  c = c + 1;

<bb 10>:
  m.8 = m;
  if (c < m.8)
    goto <bb 3>;
  else
    goto <bb 11>;

<bb 11>:
  D.1735 = 0;
  return D.1735;

}



--------------------------------------------------
Integer Array Declaration : int multiply[10][10]
Integer Array Declaration : int second[10][10]
Integer Array Declaration : int first[10][10]
Identifier of type integer found : sum
Identifier of type integer found : k
Identifier of type integer found : d
Identifier of type integer found : c
Identifier of type integer found : q
Identifier of type integer found : p
Identifier of type integer found : n
Identifier of type integer found : m
Identifier of type integer found : D.1735
Identifier of type integer found : m.8
Identifier of type integer found : q.7
Identifier of type integer found : d.6
Identifier of type integer found : c.5
Identifier of type integer found : p.4
Identifier of type integer found : D.1729
Identifier of type integer found : D.1728
Identifier of type integer found : d.3
Identifier of type integer found : k.2
Identifier of type integer found : D.1725
Identifier of type integer found : k.1
Identifier of type integer found : c.0

Block : <bb 2>
sum = <integerValue>
printf(...)
printf(...)
printf(...)
printf(...)
printf(...)
printf(...)
c = <integerValue>

Block : <bb 3>
d = <integerValue>

Block : <bb 4>
k = <integerValue>

Block : <bb 5>
c.0 = <integerValue>
k.1 = <integerValue>
D.1725 = <integerValue>
k.2 = <integerValue>
d.3 = <integerValue>
D.1728 = <integerValue>
D.1729 = <integerValue>
sum = <integerValue>
k = <integerValue>

Block : <bb 6>
p.4 = <integerValue>
if k< <integerValue>, goto <bb 5>,else, goto <bb 7>

Block : <bb 7>
c.5 = <integerValue>
d.6 = <integerValue>
multiply[c.5][d.6] = <integerValue>
sum = <integerValue>
d = <integerValue>

Block : <bb 8>
q.7 = <integerValue>
if d< <integerValue>, goto <bb 4>,else, goto <bb 9>

Block : <bb 9>
c = <integerValue>

Block : <bb 10>
m.8 = <integerValue>
if c< <integerValue>, goto <bb 3>,else, goto <bb 11>

Block : <bb 11>
D.1735 = <integerValue>

Symbol table : -
Symbol 0 : sum, Value : <integerValue>
Symbol 1 : k, Value : <integerValue>
Symbol 2 : d, Value : <integerValue>
Symbol 3 : c, Value : <integerValue>
Symbol 4 : q, Value : <integerValue>
Symbol 5 : p, Value : <integerValue>
Symbol 6 : n, Value : <integerValue>
Symbol 7 : m, Value : <integerValue>
Symbol 8 : D.1735, Value : <integerValue>
Symbol 9 : m.8, Value : <integerValue>
Symbol 10 : q.7, Value : <integerValue>
Symbol 11 : d.6, Value : <integerValue>
Symbol 12 : c.5, Value : <integerValue>
Symbol 13 : p.4, Value : <integerValue>
Symbol 14 : D.1729, Value : <integerValue>
Symbol 15 : D.1728, Value : <integerValue>
Symbol 16 : d.3, Value : <integerValue>
Symbol 17 : k.2, Value : <integerValue>
Symbol 18 : D.1725, Value : <integerValue>
Symbol 19 : k.1, Value : <integerValue>
Symbol 20 : c.0, Value : <integerValue>

--------------------------------------------------

<bb 2>:
goto <bb 10>

<bb 3>:
goto <bb 8>

<bb 4>:
goto <bb 6>

<bb 5>:

<bb 6>:
goto <bb 5>
goto <bb 7>

<bb 7>:

<bb 8>:
goto <bb 4>
goto <bb 9>

<bb 9>:

<bb 10>:
goto <bb 3>
goto <bb 11>

<bb 11>:
