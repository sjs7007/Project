//working function to get stdout in int form.
//Takes in two files and print o/p of both files for diff arg values. Added some more comments.
//in next program compare them

#include <iomanip>
#include <iostream>
#include <stdio.h> //for popen,fgets
#include <stdlib.h> //for atoi
#include <sstream> //for using ostringstream while converting int to string

using namespace std;

const int Max_Buffer = 255;
const int nTestCases = 200;

int getOutput(string commandInput);
string toString(int x);
bool compareExecutables(string cmd1,string cmd2);

int main()
{
	//cout<<"Output : "<<getOutput("./temp10");
	compareExecutables("./testProgram1 ","./testProgram2 ");
}

int getOutput(string commandInput) //run given command and return its stdout converted as int type
{
	string temp;
	int output;
	char buffer[Max_Buffer];
	FILE *stream = popen(commandInput.c_str(),"r");
	while( fgets(buffer,Max_Buffer,stream)!=NULL )
	{
		temp.append(buffer);
	}
	pclose(stream);
	output=atoi(temp.c_str()); //convert string to int
	return output;
}

string toString(int x) //return int converted to std::string
{
	ostringstream s; //Read comments below
	s << x; // Inser integter into output stream
	string converted(s.str()); // str() used to access the sequence of characters of ostringstream as a string object
	return converted;
}

bool compareExecutables(string ip1,string ip2)
{
	int flag = 0;
	
	for(int i=0;i<nTestCases;i++)
	{	
		string cmd1=ip1,cmd2=ip2;
		
		cmd1= cmd1.append(toString(i));
		cmd2= cmd2.append(toString(i));
		
		int temp1 = getOutput(cmd1.c_str());
		int temp2 = getOutput(cmd2.c_str());
		cout<<temp1<<" "<<temp2<<endl;

		if(temp1!=temp2)
		{
			flag=1;
			cout<<"Failed for test case i= "<<i<<"."<<endl;
			break;
		}
	}
	if(flag==0)
	{
		cout<<"Passed for all "<<nTestCases<<" test cases."<<endl;
		return false; //not same
	}
	else
	{
		return true; //same
	}
}



/*
   c_str() : Returns a pointer to an array that contains a 
   			 null-terminated sequence of characters (i.e., a C-string) r
   			 epresenting the current value of the string object.

   	http://www.cplusplus.com/reference/string/string/c_str/

   	ostringstream : 
				Output stream class to operate on strings.
				Objects of this class use a string buffer that contains a sequence of characters.
			    This sequence of characters can be accessed directly as a string object, using member str.

	http://www.cplusplus.com/reference/sstream/ostringstream/

	operator<< inherited from ostream

	ostream& operator<< (int val);

	Generates a sequence of characters with representation of val and inserts them into output stream.

	http://www.cplusplus.com/reference/ostream/ostream/operator%3C%3C/

*/
